name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PORT: ${{secrets.PORT }}
      ENC_SECRET: ${{secrets.ENC_SECRET }}
      JWT_SECRET: ${{secrets.JWT_SECRET }}
      JWT_REFRESH_SECRET: ${{secrets.JWT_REFRESH_SECRET }}
      JWT_EXPIRES: ${{secrets.JWT_EXPIRES }}
      EMAIL: ${{secrets.EMAIL }}
      PASSWORD: ${{secrets.PASSWORD }}
      DB_HOST: ${{secrets.DB_HOST }}
      DB_PORT: ${{secrets.DB_PORT }}
      DB_USER: ${{secrets.DB_USER }}
      DB_PWD: ${{secrets.DB_PWD }}
      DB_NAME: ${{secrets.DB_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set the version value
        id: version
        run: |
          version=$(jq '.version' package.json | sed "s/\"//g")
          echo "PKG_VERSION=v$version" >> "$GITHUB_OUTPUT"
      # PREPARE DOCKER ENVIRONMENT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          logout: true
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            rodcordeiro/escriba
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha  
      # BUILD AND PUSH DOCKER IMAGES
      - name: Build and push Docker images
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          push: true
          tags: rodcordeiro/escriba:latest,rodcordeiro/escriba:${{ steps.version.outputs.PKG_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
      
      # - name: install ssh keys # https://www.programonaut.com/how-to-host-an-application-on-a-server-vps-using-docker/
      #   run: |
      #     install -m 600 -D /dev/null ~/.ssh/id_rsa
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
      #     ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      # - name: connect and pull
      #   run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && sudo docker compose pull && sudo docker compose up -d && exit"
      # - name: cleanup
      #   run: rm -rf ~/.ssh